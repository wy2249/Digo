
; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; DIGO Async Function Metadata BEGIN

; VERSION = 1

; FUNC DECLARE BEGIN
; FUNC_NAME = 'add_int_100'
; FUNC_ANNOT = 'async'
; PARAMETERS = 'int'
; RETURN_TYPE = 'int'
; FUNC DECLARE END

; DIGO Async Function Metadata END

@.str = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare dso_local void @printFloat(double)
declare dso_local void @printInt(i32) 
declare dso_local void @printString(i8* nocapture readonly)


; THIS IS AN ASYNC FUNCTION
define {i64} @add_int_100(i64 %i) #0 {
  %add = add nsw i64 %i, 100

  %aggRet = insertvalue {i64} undef, i64 %add, 0
  ret {i64} %aggRet
}

define void @digo_main() {
entry:

  %future_obj = call i8* @digo_linker_async_call_func_add_int_100(i64 502)
  %retaggval = call {i64} @digo_linker_await_func_add_int_100(i8* %future_obj)

  %retval = extractvalue {i64} %retaggval, 0
  call void @JobDecRef(i8* %future_obj)

  %conv = trunc i64 %retval to i32

  call void @printInt(i32 %conv)
  ret void
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}


declare dso_local i8* @CreateString(i8*)
declare dso_local i8* @GetString(i8*)

declare dso_local void @AwaitJob(i8*, i8**, i32*)
declare dso_local void @JobDecRef(i8*)
declare dso_local i8* @CreateAsyncJob(i32, i8*, i32)
declare dso_local i8* @CreateRemoteJob(i32, i8*, i32)

declare dso_local i8* @SW_CreateWrapper()
declare dso_local void @SW_AddString(i8*, i8*)
declare dso_local void @SW_AddInt32(i8*, i32)
declare dso_local void @SW_AddInt64(i8*, i64)
declare dso_local void @SW_GetAndDestroy(i8*, i8**, i32*)

declare dso_local i8* @SW_CreateExtractor(i8*, i32)
declare dso_local i32 @SW_ExtractInt32(i8*)
declare dso_local i64 @SW_ExtractInt64(i8*)
declare dso_local i8* @SW_ExtractString(i8*)
declare dso_local void @SW_DestroyExtractor(i8*)

declare dso_local void @NoMatchExceptionHandler(i32 %func_id)
declare dso_local void @ASYNC_AddFunction(i32, i8*)

declare dso_local i32 @entry(i32, i8**)

declare dso_local void @Debug_Real_LinkerCallFunction(i32, i32)


define i8* @digo_linker_async_call_func_add_int_100(i64 %arg0) {
  %call = call i8* @digo_linker_async_call_id_0(i64 %arg0)
  ret i8* %call
}

define i8* @digo_linker_async_call_id_0(i64 %arg0) {
entry:
  %wrapper = call i8* @SW_CreateWrapper()

  
  call void @SW_AddInt64(i8* %wrapper, i64 %arg0)

  %result = alloca i8*, align 8
  %len = alloca i32, align 4

  call void @SW_GetAndDestroy(i8* %wrapper, i8** %result, i32* %len)

  %result_in = load i8*, i8** %result, align 8
  %len_in = load i32, i32* %len, align 4

  %future_obj = call i8* @CreateAsyncJob(i32 0, i8* %result_in, i32 %len_in)

  ret i8* %future_obj
}

define { i64 } @digo_linker_await_func_add_int_100(i8* %arg_future_obj) {
  %call = call { i64 } @digo_linker_await_id_0(i8* %arg_future_obj)
  ret { i64 } %call
}

define { i64 } @digo_linker_await_id_0(i8* %arg_future_obj) {
  %result = alloca i8*, align 8
  %len = alloca i32, align 4
  call void @AwaitJob(i8* %arg_future_obj, i8** %result, i32* %len)

  %result_in = load i8*, i8** %result, align 8
  %len_in = load i32, i32* %len, align 4

  %extractor = call i8* @SW_CreateExtractor(i8* %result_in, i32 %len_in)

  
  %ret0 = call i64 @SW_ExtractInt64(i8* %extractor)


  call void @SW_DestroyExtractor(i8* %extractor)

  %aggRet = insertvalue { i64 } undef, i64 %ret0, 0


  ret { i64 } %aggRet
}


define i32 @linker_call_function(i32 %func_id, i8* %arg, i32 %arg_len, i8** %result, i32* %result_len) {
  call void @Debug_Real_LinkerCallFunction(i32 %func_id, i32 %arg_len)

  %wrapper = call i8* @SW_CreateWrapper()
  %extractor = call i8* @SW_CreateExtractor(i8* %arg, i32 %arg_len)

  switch i32 %func_id, label %if.nomatch [

    i32 0, label %if.func0

  ]


if.func0:
  
  %arg0 = call i64 @SW_ExtractInt64(i8* %extractor)

  %aggResult0 = call { i64 } @add_int_100(i64 %arg0)
  %tmp_0 = extractvalue { i64 } %aggResult0, 0

  call void @SW_AddInt64(i8* %wrapper, i64 %tmp_0)
  call void @SW_GetAndDestroy(i8* %wrapper, i8** %result, i32* %result_len)

  br label %if.end


if.nomatch:
  call void @NoMatchExceptionHandler(i32 %func_id)
  ret i32 0

if.end:

  call void @SW_DestroyExtractor(i8* %extractor)

  ret i32 0
}

@.str.digo.linker.async.func.name0 = private unnamed_addr constant [12 x i8] c"add_int_100\00", align 1




define void @init_async_function_table() {
  call void @ASYNC_AddFunction(i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.digo.linker.async.func.name0, i64 0, i64 0))

  ret void
}

define i32 @main(i32 %argc, i8** %argv) {
entry:
  call void @init_async_function_table()

  %morw = call i32 @entry(i32 %argc, i8** %argv)

  switch i32 %morw, label %if.worker [
    i32 1, label %if.master
    i32 2, label %if.worker
  ]

if.master:
  call void @digo_main()
  ret i32 0

if.worker:
  ret i32 0
}
