func main(a int) void {

    var b,c future 
    
    b = try_return_one(1)

    c = try_return_one(1)

    d := try_return_one(1)

    e,f := try_return_one_n(1)


}

async func try_return_one(a int) int {
    
    a = 1
    return a+10
}

func try_return_one_n(a int) (int,int) {
    
    a = 1
    return a+10, a
}

/*

; ModuleID = 'Digo'
source_filename = "Digo"

@str = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"

declare void @printInt(i64)

declare void @printFloat(double)

declare void @printString(i8*)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

define { void } @main(i64 %a) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %b = alloca i8*
  %c = alloca i8*
  %try_return_one_result = call i8* @digo_linker_async_call_try_return_one(i64 1)
  store i8* %try_return_one_result, i8** %b
  %try_return_one_result2 = call i8* @digo_linker_async_call_try_return_one(i64 1)
  store i8* %try_return_one_result2, i8** %c
  %d = alloca i8*
  %try_return_one_result3 = call i8* @digo_linker_async_call_try_return_one(i64 1)
  store i8* %try_return_one_result3, i8** %d
  %e = alloca i64
  %f = alloca i64
  %try_return_one_n_result = call { i64, i64 } @try_return_one_n(i64 1)
  %extracted_value = extractvalue { i64, i64 } %try_return_one_n_result, 0
  store i64 %extracted_value, i64* %e
  %extracted_value4 = extractvalue { i64, i64 } %try_return_one_n_result, 1
  store i64 %extracted_value4, i64* %f
  ret { void } zeroinitializer
}

define { i64 } @try_return_one(i64 %a) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  store i64 1, i64* %a1
  %a2 = load i64, i64* %a1
  %tmp = add i64 %a2, 10
  %mrv = insertvalue { i64 } undef, i64 %tmp, 0
  ret { i64 } %mrv
}

define { i64, i64 } @try_return_one_n(i64 %a) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  store i64 1, i64* %a1
  %a2 = load i64, i64* %a1
  %tmp = add i64 %a2, 10
  %a3 = load i64, i64* %a1
  %mrv = insertvalue { i64, i64 } undef, i64 %tmp, 0
  %mrv4 = insertvalue { i64, i64 } %mrv, i64 %a3, 1
  ret { i64, i64 } %mrv4
}

declare i8* @digo_linker_async_call_try_return_one(i64)

*/

