func digo_main() void {

    []string {"this","is","a","test"}

    []int {1,2,3,4}
    
    []float {1.0,2.0,3.0,4.0}

    var s []int
    s[1]= 5

    a := []int {1,2,3,4}

    b := a[0:1]
    
    c := a[0:]
    d := a[:3]

    e := len(b)

    f := append(a,5)

    g := a[1]

    a[2] = 10

    print("%d",10)
}

/*
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@str = private unnamed_addr constant [3 x i8] c"%s\00"
@int = private unnamed_addr constant [3 x i8] c"%d\00"
@future = private unnamed_addr constant [3 x i8] c"%x\00"
@double = private unnamed_addr constant [3 x i8] c"%f\00"
@slice = private unnamed_addr constant [3 x i8] c"%l\00"
@createstr_ptr = private unnamed_addr constant [5 x i8] c"this\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"is\00"
@createstr_ptr.2 = private unnamed_addr constant [2 x i8] c"a\00"
@createstr_ptr.3 = private unnamed_addr constant [5 x i8] c"test\00"

declare void @printInt(i64)

declare void @printFloat(double)

declare void @printString(i8*)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare void @print(i8*, ...)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppends(i8*, i8*)

declare i8* @SliceAppendn(i8*, i64)

declare i8* @SliceAppendf(i8*, double)

declare i8* @SliceAppendF(i8*, i8*)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

define void @digo_main() {
entry:
  %createslice = call i8* @CreateSlice(i64 1)
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @createstr_ptr, i32 0, i32 0))
  %initslices = call i8* @SliceAppends(i8* %createslice, i8* %createstr)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  %initslices2 = call i8* @SliceAppends(i8* %initslices, i8* %createstr1)
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @createstr_ptr.2, i32 0, i32 0))
  %initslices4 = call i8* @SliceAppends(i8* %initslices2, i8* %createstr3)
  %createstr5 = call i8* @CreateString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @createstr_ptr.3, i32 0, i32 0))
  %initslices6 = call i8* @SliceAppends(i8* %initslices4, i8* %createstr5)
  %createslice7 = call i8* @CreateSlice(i64 3)
  %initslicen = call i8* @SliceAppendn(i8* %createslice7, i64 1)
  %initslicen8 = call i8* @SliceAppendn(i8* %initslicen, i64 2)
  %initslicen9 = call i8* @SliceAppendn(i8* %initslicen8, i64 3)
  %initslicen10 = call i8* @SliceAppendn(i8* %initslicen9, i64 4)
  %createslice11 = call i8* @CreateSlice(i64 4)
  %initslicen12 = call i8* @SliceAppendf(i8* %createslice11, double 1.000000e+00)
  %initslicen13 = call i8* @SliceAppendf(i8* %initslicen12, double 2.000000e+00)
  %initslicen14 = call i8* @SliceAppendf(i8* %initslicen13, double 3.000000e+00)
  %initslicen15 = call i8* @SliceAppendf(i8* %initslicen14, double 4.000000e+00)
  %a = alloca i8*
  %createslice16 = call i8* @CreateSlice(i64 3)
  %initslicen17 = call i8* @SliceAppendn(i8* %createslice16, i64 1)
  %initslicen18 = call i8* @SliceAppendn(i8* %initslicen17, i64 2)
  %initslicen19 = call i8* @SliceAppendn(i8* %initslicen18, i64 3)
  %initslicen20 = call i8* @SliceAppendn(i8* %initslicen19, i64 4)
  store i8* %initslicen20, i8** %a
  %b = alloca i8*
  %a21 = load i8*, i8** %a
  %SliceSlice = call i8* @SliceSlice(i8* %a21, i64 0, i64 1)
  store i8* %SliceSlice, i8** %b
  %c = alloca i8*
  %a22 = load i8*, i8** %a
  %totallen = call i64 @GetSliceSize(i8* %a22)
  %getlastindex = sub i64 %totallen, 1
  %SliceSlice23 = call i8* @SliceSlice(i8* %a22, i64 0, i64 %getlastindex)
  store i8* %SliceSlice23, i8** %c
  %d = alloca i8*
  %a24 = load i8*, i8** %a
  %SliceSlice25 = call i8* @SliceSlice(i8* %a24, i64 0, i64 3)
  store i8* %SliceSlice25, i8** %d
  %e = alloca i64
  %b26 = load i8*, i8** %b
  %str_len = call i64 @GetStringSize(i8* %b26)
  store i64 %str_len, i64* %e
  %f = alloca i8*
  %a27 = load i8*, i8** %a
  %initslicen28 = call i8* @SliceAppendn(i8* %a27, i64 5)
  store i8* %initslicen28, i8** %f
  %g = alloca i64
  %a29 = load i8*, i8** %a
  %findsliceindexn = call i64 @GetSliceIndexInt(i8* %a29, i64 1)
  store i64 %findsliceindexn, i64* %g
  %a30 = load i8*, i8** %a
  %setsliceidxn = call i64 @SetSliceIndexInt(i8* %a30, i64 2, i64 10)
  call void (i8*, ...) @print(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @int, i32 0, i32 0), i64 10)
  ret void
}
*/