//word-count

// The workers execute this `async remote` function.
// Calling an `async remote` function returns immediately
// after the job is dispatched to a worker. It does not 
// wait for the job to finish.
// An `async remote` function does not return with return values
// defined in the function prototype.
// Instead, it returns a future object, on which 
// user can call await/gather to get the actual return values.

async func remote_count_word(words []string) ([]string, []int) {
     // println("in remote_count_word: parameters: %l", words)
    // we first sorts the words.
    quick_sort(words, 0, len(words) - 1)

    resultWord := []string{}
    resultCount := []int{}
    if (len(words) == 0) {
        return resultWord, resultCount
    }
    word := words[0]
    resultWord = append(resultWord, word)
    resultCount = append(resultCount, 1)

    i := 1
    for (i = 1; i < len(words); i = i + 1) {
        if (words[i] == word) {
            resultCount[len(resultWord)-1] = resultCount[len(resultWord)-1] + 1
        } else {
            word = words[i]
            resultWord = append(resultWord, words[i])
            resultCount = append(resultCount, 1)
        }
    }
    
    /// println("remote_count_word: going to return: %l | %l", resultWord, resultCount)
    return resultWord, resultCount
}

// The master executes this `async` function in a new thread.
// Calling an `async` function returns immediately with
// a implicit future object.
async func count_words_in_file(file string, taskCount int) ([]string, []int) {

    words := read(file)
    worker_word_cnt := len(words) / taskCount
    i := 0

    if (len(words) == 0) {
        println("warning!!!! len words = 0")
    }

    futures := []future{}
    for (i = 0; i < len(words); i = i + worker_word_cnt) {
        // Calling the `async remote` worker_count_word function
        // will automatically send the task to a worker.
        // It does not block.
        futures = append(futures, remote_count_word(words[i : i + worker_word_cnt]))
    }
    if (i != len(words)) {
        futures = append(futures, remote_count_word(words[i : len(words)]))
    }
    
    mergedWords := []string{}
    mergedCount := []int{}

    for (i = 0 ; i < len(futures) ; i = i + 1) {
        // Here, we are explicity waiting for the remote task
        // to finish.
        remote_task := futures[i]
        resultWord, resultCount := await remote_task
        
        w, c := merge_two_word_cnt(resultWord, resultCount, mergedWords, mergedCount)
         println("count_words_in_file: current: %l | %l", mergedWords, mergedCount)
        mergedWords = w
        mergedCount = c
    }

     println("count_words_in_file: going to return: %l | %l", mergedWords, mergedCount)
    return mergedWords, mergedCount
}

// we merge wordcnt1 into wordcnt2
func merge_two_word_cnt(words1 []string, cnt1 []int, words2 []string, cnt2 []int) ([]string, []int) {
    j := 0
    k := 0

    for (j = 0; j < len(words1); j = j + 1) {
        found := 0
        for (k = 0; k < len(words2); k = k + 1) {
            if (words1[j] == words2[k]) {
                if (found == 1) {
                    println("error")
                }
                found = 1
                cnt2[k] = cnt2[k] + cnt1[j]
            }
        }
        if (found == 0) {
            words2 = append(words2, words1[j])
            cnt2 = append(cnt2, cnt1[j])
        }
    }
    return words2, cnt2
}

func word_count_entry() {
    futures := []future{}

    futures = append(futures, count_words_in_file("./digo-test/Remote/book1.txt", 4))
    futures = append(futures, count_words_in_file("./digo-test/Remote/book2.txt", 4))
    futures = append(futures, count_words_in_file("./digo-test/Remote/book3.txt", 4))

    // Calling `async`/`async remote` functions does not block unless
    // we expicitly wait for them to finish by calling await/gather.
    // So word_count_entry() does not block until we `gather` here:
    
    i := 0
    for (i = 0; i < len(futures); i = i + 1) {
        println("Word Count result of book%d: ", i + 1)
        f := futures[i]
        words, count := await f
        if (len(words) != len(count)) {
            println("error!")
        } else {
            var j int
            for (j = 0; j < len(words); j = j + 1) {
                println("word: %s, count: %d", words[j], count[j])
            } 
        }
    }
}

// a quick sort function for string slice
func quick_sort(arr []string, p int, q int) void {
    if (p < q) {
        pivot := arr[p]
        i := p
        var j int
        for (j = p + 1; j <= q; j = j + 1) {
            if (arr[j] <= pivot) {
                i = i + 1
                swap(arr, i, j)
            }
        }
        swap(arr, p, i)
        quick_sort(arr, p, i - 1)
        quick_sort(arr, i + 1, q)
    }
}

func swap(arr []string, i int, j int) void {
    tmp := arr[i]
    arr[i] = arr[j]
    arr[j] = tmp
}

func min(p int, q int) int {
    if (p < q) {
        return p
    } else {
        return q
    }
}

func digo_main() void { 
    word_count_entry()
}
