
##### Testing test-print
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%s\00"
@createstr_ptr.3 = private unnamed_addr constant [6 x i8] c"hello\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @CloneSlice(i8*)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 42)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1, double 4.201200e+01)
  %createstr2 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @createstr_ptr.3, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr2, i8* %createstr3)
  ret void
}

##### Testing test-read
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [23 x i8] c"./Utils/test-read.digo\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%s\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @CloneSlice(i8*)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %words = alloca i8*
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @createstr_ptr, i32 0, i32 0))
  %read_file = call i8* @ReadFile(i8* %createstr)
  %cloneslice = call i8* @CloneSlice(i8* %read_file)
  store i8* %cloneslice, i8** %words
  %i = alloca i64
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  %words2 = load i8*, i8** %words
  %slicelen = call i64 @GetSliceSize(i8* %words2)
  call void (i8*, ...) @println(i8* %createstr1, i64 %slicelen)
  store i64 0, i64* %i
  br label %for

for:                                              ; preds = %for_body, %entry
  %i7 = load i64, i64* %i
  %words8 = load i8*, i8** %words
  %slicelen9 = call i64 @GetSliceSize(i8* %words8)
  %tmp10 = icmp slt i64 %i7, %slicelen9
  %booleantoint = select i1 %tmp10, i64 1, i64 0
  %judgeif = icmp eq i64 %booleantoint, 1
  br i1 %judgeif, label %for_body, label %merge

for_body:                                         ; preds = %for
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  %words4 = load i8*, i8** %words
  %i5 = load i64, i64* %i
  %findsliceindexs = call i8* @GetSliceIndexString(i8* %words4, i64 %i5)
  call void (i8*, ...) @println(i8* %createstr3, i8* %findsliceindexs)
  %i6 = load i64, i64* %i
  %tmp = add i64 %i6, 1
  store i64 %tmp, i64* %i
  br label %for

merge:                                            ; preds = %for
  ret void
}
