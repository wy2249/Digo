
##### Testing test-add1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @add(i64 %x, i64 %y) {
entry:
  %x1 = alloca i64
  store i64 %x, i64* %x1
  %y2 = alloca i64
  store i64 %y, i64* %y2
  %x3 = load i64, i64* %x1
  %y4 = load i64, i64* %y2
  %tmp = add i64 %x3, %y4
  %mrv = insertvalue { i64 } undef, i64 %tmp, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %add_result = call { i64 } @add(i64 17, i64 25)
  call void (i8*, ...) @println(i8* %createstr, { i64 } %add_result)
  ret void
}

##### Testing test-arith1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 42)
  ret void
}

##### Testing test-arith2
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 11)
  ret void
}

##### Testing test-arith3
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @foo(i64 %a) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %a2 = load i64, i64* %a1
  %mrv = insertvalue { i64 } undef, i64 %a2, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  %a = alloca i64
  store i64 42, i64* %a
  %a1 = load i64, i64* %a
  %tmp = add i64 %a1, 5
  store i64 %tmp, i64* %a
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %a2 = load i64, i64* %a
  call void (i8*, ...) @println(i8* %createstr, i64 %a2)
  ret void
}

##### Testing test-fib

##### Testing test-float1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%f\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %a = alloca double
  store double 0x400921FB567806CD, double* %a
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %a1 = load double, double* %a
  call void (i8*, ...) @println(i8* %createstr, double %a1)
  ret void
}

##### Testing test-float2
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%f\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %a = alloca double
  %b = alloca double
  %c = alloca double
  store double 0x400921FB567806CD, double* %a
  store double -2.718280e+00, double* %b
  %a1 = load double, double* %a
  %b2 = load double, double* %b
  %tmp = fadd double %a1, %b2
  store double %tmp, double* %c
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %c3 = load double, double* %c
  call void (i8*, ...) @println(i8* %createstr, double %c3)
  ret void
}

##### Testing test-float3
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.3 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.4 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.5 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.6 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.7 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.8 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.9 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.10 = private unnamed_addr constant [3 x i8] c"%f\00"
@createstr_ptr.11 = private unnamed_addr constant [3 x i8] c"%f\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @testfloat(double %a, double %b) {
entry:
  %a1 = alloca double
  store double %a, double* %a1
  %b2 = alloca double
  store double %b, double* %b2
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %a3 = load double, double* %a1
  %b4 = load double, double* %b2
  %tmp = fadd double %a3, %b4
  call void (i8*, ...) @println(i8* %createstr, double %tmp)
  %createstr5 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  %a6 = load double, double* %a1
  %b7 = load double, double* %b2
  %tmp8 = fsub double %a6, %b7
  call void (i8*, ...) @println(i8* %createstr5, double %tmp8)
  %createstr9 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  %a10 = load double, double* %a1
  %b11 = load double, double* %b2
  %tmp12 = fmul double %a10, %b11
  call void (i8*, ...) @println(i8* %createstr9, double %tmp12)
  %createstr13 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.3, i32 0, i32 0))
  %a14 = load double, double* %a1
  %b15 = load double, double* %b2
  %tmp16 = fdiv double %a14, %b15
  call void (i8*, ...) @println(i8* %createstr13, double %tmp16)
  %createstr17 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.4, i32 0, i32 0))
  %a18 = load double, double* %a1
  %b19 = load double, double* %b2
  %tmp20 = fcmp oeq double %a18, %b19
  call void (i8*, ...) @println(i8* %createstr17, i1 %tmp20)
  %createstr21 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.5, i32 0, i32 0))
  %a22 = load double, double* %a1
  %a23 = load double, double* %a1
  %tmp24 = fcmp oeq double %a22, %a23
  call void (i8*, ...) @println(i8* %createstr21, i1 %tmp24)
  %createstr25 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.6, i32 0, i32 0))
  %a26 = load double, double* %a1
  %b27 = load double, double* %b2
  %tmp28 = fcmp one double %a26, %b27
  call void (i8*, ...) @println(i8* %createstr25, i1 %tmp28)
  %createstr29 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.7, i32 0, i32 0))
  %a30 = load double, double* %a1
  %a31 = load double, double* %a1
  %tmp32 = fcmp one double %a30, %a31
  call void (i8*, ...) @println(i8* %createstr29, i1 %tmp32)
  %createstr33 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.8, i32 0, i32 0))
  %a34 = load double, double* %a1
  %b35 = load double, double* %b2
  %tmp36 = fcmp ogt double %a34, %b35
  call void (i8*, ...) @println(i8* %createstr33, i1 %tmp36)
  %createstr37 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.9, i32 0, i32 0))
  %a38 = load double, double* %a1
  %b39 = load double, double* %b2
  %tmp40 = fcmp oge double %a38, %b39
  call void (i8*, ...) @println(i8* %createstr37, i1 %tmp40)
  %createstr41 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.10, i32 0, i32 0))
  %a42 = load double, double* %a1
  %b43 = load double, double* %b2
  %tmp44 = fcmp olt double %a42, %b43
  call void (i8*, ...) @println(i8* %createstr41, i1 %tmp44)
  %createstr45 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.11, i32 0, i32 0))
  %a46 = load double, double* %a1
  %b47 = load double, double* %b2
  %tmp48 = fcmp ole double %a46, %b47
  call void (i8*, ...) @println(i8* %createstr45, i1 %tmp48)
  ret void
}

define void @digo_main() {
entry:
  %c = alloca double
  store double 4.200000e+01, double* %c
  %d = alloca double
  store double 3.141590e+00, double* %d
  %c1 = load double, double* %c
  %d2 = load double, double* %d
  call void @testfloat(double %c1, double %d2)
  %d3 = load double, double* %d
  %d4 = load double, double* %d
  call void @testfloat(double %d3, double %d4)
  ret void
}

##### Testing test-for1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %i = alloca i64
  store i64 0, i64* %i
  br label %for

for:                                              ; preds = %for_body, %entry
  %i3 = load i64, i64* %i
  %tmp4 = icmp slt i64 %i3, 5
  br i1 %tmp4, label %for_body, label %merge

for_body:                                         ; preds = %for
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %i1 = load i64, i64* %i
  call void (i8*, ...) @println(i8* %createstr, i64 %i1)
  %i2 = load i64, i64* %i
  %tmp = add i64 %i2, 1
  store i64 %tmp, i64* %i
  br label %for

merge:                                            ; preds = %for
  %createstr5 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr5, i64 42)
  ret void
}

##### Testing test-for2
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %i = alloca i64
  store i64 0, i64* %i
  br label %for

for:                                              ; preds = %for_body, %entry
  %i3 = load i64, i64* %i
  %tmp4 = icmp slt i64 %i3, 5
  br i1 %tmp4, label %for_body, label %merge

for_body:                                         ; preds = %for
  %i1 = load i64, i64* %i
  %tmp = add i64 %i1, 1
  store i64 %tmp, i64* %i
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %i2 = load i64, i64* %i
  call void (i8*, ...) @println(i8* %createstr, i64 %i2)
  br label %for

merge:                                            ; preds = %for
  %createstr5 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr5, i64 42)
  ret void
}

##### Testing test-func1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @add(i64 %a, i64 %b) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %b2 = alloca i64
  store i64 %b, i64* %b2
  %a3 = load i64, i64* %a1
  %b4 = load i64, i64* %b2
  %tmp = add i64 %a3, %b4
  %mrv = insertvalue { i64 } undef, i64 %tmp, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  %a = alloca i64
  %add_result = call { i64 } @add(i64 39, i64 3)
  %extracted_value = extractvalue { i64 } %add_result, 0
  store i64 %extracted_value, i64* %a
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %a1 = load i64, i64* %a
  call void (i8*, ...) @println(i8* %createstr, i64 %a1)
  ret void
}

##### Testing test-func2
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @fun(i64 %x, i64 %y) {
entry:
  %x1 = alloca i64
  store i64 %x, i64* %x1
  %y2 = alloca i64
  store i64 %y, i64* %y2
  ret { i64 } zeroinitializer
}

define void @digo_main() {
entry:
  %i = alloca i64
  store i64 1, i64* %i
  store i64 2, i64* %i
  %i1 = load i64, i64* %i
  %tmp = add i64 %i1, 1
  store i64 %tmp, i64* %i
  %fun_result = call { i64 } @fun(i64 2, i64 %tmp)
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %i2 = load i64, i64* %i
  call void (i8*, ...) @println(i8* %createstr, i64 %i2)
  ret void
}

##### Testing test-func3
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [12 x i8] c"%d %d %d %d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @printem(i64 %a, i64 %b, i64 %c, i64 %d) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %b2 = alloca i64
  store i64 %b, i64* %b2
  %c3 = alloca i64
  store i64 %c, i64* %c3
  %d4 = alloca i64
  store i64 %d, i64* %d4
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @createstr_ptr, i32 0, i32 0))
  %a5 = load i64, i64* %a1
  %b6 = load i64, i64* %b2
  %c7 = load i64, i64* %c3
  %d8 = load i64, i64* %d4
  call void (i8*, ...) @println(i8* %createstr, i64 %a5, i64 %b6, i64 %c7, i64 %d8)
  ret void
}

define void @digo_main() {
entry:
  call void @printem(i64 42, i64 17, i64 192, i64 8)
  ret void
}

##### Testing test-func4

##### Testing test-func5
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @foo(i64 %a) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %a2 = load i64, i64* %a1
  %mrv = insertvalue { i64 } undef, i64 %a2, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  ret void
}

##### Testing test-func6
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @foo() {
entry:
  ret void
}

define { i64 } @bar(i64 %a, i1 %b, i64 %c) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %b2 = alloca i1
  store i1 %b, i1* %b2
  %c3 = alloca i64
  store i64 %c, i64* %c3
  %a4 = load i64, i64* %a1
  %c5 = load i64, i64* %c3
  %tmp = add i64 %a4, %c5
  %mrv = insertvalue { i64 } undef, i64 %tmp, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %bar_result = call { i64 } @bar(i64 17, i1 false, i64 25)
  call void (i8*, ...) @println(i8* %createstr, { i64 } %bar_result)
  ret void
}

##### Testing test-func8
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @foo(i64 %a) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %a2 = load i64, i64* %a1
  %tmp = add i64 %a2, 3
  call void (i8*, ...) @println(i8* %createstr, i64 %tmp)
  ret void
}

define void @digo_main() {
entry:
  call void @foo(i64 40)
  ret void
}

##### Testing test-func9
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @foo(i64 %a) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %a2 = load i64, i64* %a1
  %tmp = add i64 %a2, 3
  call void (i8*, ...) @println(i8* %createstr, i64 %tmp)
  ret void
}

define void @digo_main() {
entry:
  call void @foo(i64 40)
  ret void
}

##### Testing test-gcd
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @gcd(i64 %a, i64 %b) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %b2 = alloca i64
  store i64 %b, i64* %b2
  br label %for

for:                                              ; preds = %merge, %entry
  %a11 = load i64, i64* %a1
  %b12 = load i64, i64* %b2
  %tmp13 = icmp ne i64 %a11, %b12
  br i1 %tmp13, label %for_body, label %merge14

for_body:                                         ; preds = %for
  %a3 = load i64, i64* %a1
  %b4 = load i64, i64* %b2
  %tmp = icmp sgt i64 %a3, %b4
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %for

then:                                             ; preds = %for_body
  %a5 = load i64, i64* %a1
  %b6 = load i64, i64* %b2
  %tmp7 = sub i64 %a5, %b6
  store i64 %tmp7, i64* %a1
  br label %merge

else:                                             ; preds = %for_body
  %b8 = load i64, i64* %b2
  %a9 = load i64, i64* %a1
  %tmp10 = sub i64 %b8, %a9
  store i64 %tmp10, i64* %b2
  br label %merge

merge14:                                          ; preds = %for
  %a15 = load i64, i64* %a1
  %mrv = insertvalue { i64 } undef, i64 %a15, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %gcd_result = call { i64 } @gcd(i64 2, i64 14)
  call void (i8*, ...) @println(i8* %createstr, { i64 } %gcd_result)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  %gcd_result2 = call { i64 } @gcd(i64 3, i64 15)
  call void (i8*, ...) @println(i8* %createstr1, { i64 } %gcd_result2)
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  %gcd_result4 = call { i64 } @gcd(i64 99, i64 121)
  call void (i8*, ...) @println(i8* %createstr3, { i64 } %gcd_result4)
  ret void
}

##### Testing test-gcd2
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @gcd(i64 %a, i64 %b) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %b2 = alloca i64
  store i64 %b, i64* %b2
  br label %for

for:                                              ; preds = %merge, %entry
  %a11 = load i64, i64* %a1
  %b12 = load i64, i64* %b2
  %tmp13 = icmp ne i64 %a11, %b12
  br i1 %tmp13, label %for_body, label %merge14

for_body:                                         ; preds = %for
  %a3 = load i64, i64* %a1
  %b4 = load i64, i64* %b2
  %tmp = icmp sgt i64 %a3, %b4
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %for

then:                                             ; preds = %for_body
  %a5 = load i64, i64* %a1
  %b6 = load i64, i64* %b2
  %tmp7 = sub i64 %a5, %b6
  store i64 %tmp7, i64* %a1
  br label %merge

else:                                             ; preds = %for_body
  %b8 = load i64, i64* %b2
  %a9 = load i64, i64* %a1
  %tmp10 = sub i64 %b8, %a9
  store i64 %tmp10, i64* %b2
  br label %merge

merge14:                                          ; preds = %for
  %a15 = load i64, i64* %a1
  %mrv = insertvalue { i64 } undef, i64 %a15, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %gcd_result = call { i64 } @gcd(i64 14, i64 21)
  call void (i8*, ...) @println(i8* %createstr, { i64 } %gcd_result)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  %gcd_result2 = call { i64 } @gcd(i64 8, i64 36)
  call void (i8*, ...) @println(i8* %createstr1, { i64 } %gcd_result2)
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  %gcd_result4 = call { i64 } @gcd(i64 99, i64 121)
  call void (i8*, ...) @println(i8* %createstr3, { i64 } %gcd_result4)
  ret void
}

##### Testing test-hello
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 42)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1, i64 71)
  %createstr2 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr2, i64 1)
  ret void
}

##### Testing test-if1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  br i1 true, label %then, label %else

merge:                                            ; preds = %else, %then
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1, i64 17)
  ret void

then:                                             ; preds = %entry
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 42)
  br label %merge

else:                                             ; preds = %entry
  br label %merge
}

##### Testing test-if2
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  br i1 true, label %then, label %else

merge:                                            ; preds = %else, %then
  %createstr2 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr2, i64 17)
  ret void

then:                                             ; preds = %entry
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 42)
  br label %merge

else:                                             ; preds = %entry
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1, i64 8)
  br label %merge
}

##### Testing test-if3
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  br i1 false, label %then, label %else

merge:                                            ; preds = %else, %then
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1, i64 17)
  ret void

then:                                             ; preds = %entry
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 42)
  br label %merge

else:                                             ; preds = %entry
  br label %merge
}

##### Testing test-if4
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"42\00"
@createstr_ptr.1 = private unnamed_addr constant [2 x i8] c"8\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%s\00"
@createstr_ptr.3 = private unnamed_addr constant [3 x i8] c"17\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  br i1 false, label %then, label %else

merge:                                            ; preds = %else, %then
  %createstr2 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.3, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr2, i8* %createstr3)
  ret void

then:                                             ; preds = %entry
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr)
  br label %merge

else:                                             ; preds = %entry
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1)
  br label %merge
}

##### Testing test-if5
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @cond(i1 %b) {
entry:
  %b1 = alloca i1
  store i1 %b, i1* %b1
  %x = alloca i64
  %b2 = load i1, i1* %b1
  br i1 %b2, label %then, label %else

merge:                                            ; preds = %else, %then
  %x3 = load i64, i64* %x
  %mrv = insertvalue { i64 } undef, i64 %x3, 0
  ret { i64 } %mrv

then:                                             ; preds = %entry
  store i64 42, i64* %x
  br label %merge

else:                                             ; preds = %entry
  store i64 17, i64* %x
  br label %merge
}

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %cond_result = call { i64 } @cond(i1 true)
  call void (i8*, ...) @println(i8* %createstr, { i64 } %cond_result)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  %cond_result2 = call { i64 } @cond(i1 false)
  call void (i8*, ...) @println(i8* %createstr1, { i64 } %cond_result2)
  ret void
}

##### Testing test-if6
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @cond(i1 %b) {
entry:
  %b1 = alloca i1
  store i1 %b, i1* %b1
  %x = alloca i64
  store i64 10, i64* %x
  %b2 = load i1, i1* %b1
  br i1 %b2, label %then, label %else6

merge:                                            ; preds = %else6, %merge4
  %x7 = load i64, i64* %x
  %mrv = insertvalue { i64 } undef, i64 %x7, 0
  ret { i64 } %mrv

then:                                             ; preds = %entry
  %x3 = load i64, i64* %x
  %tmp = icmp eq i64 %x3, 10
  br i1 %tmp, label %then5, label %else

merge4:                                           ; preds = %else, %then5
  br label %merge

then5:                                            ; preds = %then
  store i64 42, i64* %x
  br label %merge4

else:                                             ; preds = %then
  br label %merge4

else6:                                            ; preds = %entry
  store i64 17, i64* %x
  br label %merge
}

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %cond_result = call { i64 } @cond(i1 true)
  call void (i8*, ...) @println(i8* %createstr, { i64 } %cond_result)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  %cond_result2 = call { i64 } @cond(i1 false)
  call void (i8*, ...) @println(i8* %createstr1, { i64 } %cond_result2)
  ret void
}

##### Testing test-local1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define { i64 } @foo(i64 %a, i1 %b) {
entry:
  %a1 = alloca i64
  store i64 %a, i64* %a1
  %b2 = alloca i1
  store i1 %b, i1* %b2
  %c = alloca i64
  %a3 = load i64, i64* %a1
  store i64 %a3, i64* %c
  %c4 = load i64, i64* %c
  %tmp = add i64 %c4, 10
  %mrv = insertvalue { i64 } undef, i64 %tmp, 0
  ret { i64 } %mrv
}

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  %foo_result = call { i64 } @foo(i64 37, i1 false)
  call void (i8*, ...) @println(i8* %createstr, { i64 } %foo_result)
  ret void
}

##### Testing test-ops1
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [12 x i8] c"%d %d %d %d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.3 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.4 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.5 = private unnamed_addr constant [6 x i8] c"%d %d\00"
@createstr_ptr.6 = private unnamed_addr constant [12 x i8] c"%d %d %d %d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i64 3, i64 -1, i64 2, i64 50)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1, i64 99)
  %createstr2 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr2, i1 false)
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.3, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr3, i1 true)
  %createstr4 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.4, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr4, i64 99)
  %createstr5 = call i8* @CreateString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @createstr_ptr.5, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr5, i1 true, i1 false)
  %createstr6 = call i8* @CreateString(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @createstr_ptr.6, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr6, i1 true, i1 false, i1 true, i1 true, i1 false)
  ret void
}

##### Testing test-ops2
; ModuleID = 'Digo'
source_filename = "Digo"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@createstr_ptr = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.1 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.2 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.3 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.4 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.5 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.6 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.7 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.8 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.9 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.10 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.11 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.12 = private unnamed_addr constant [3 x i8] c"%d\00"
@createstr_ptr.13 = private unnamed_addr constant [3 x i8] c"%d\00"

declare void @print(i8*, ...)

declare void @println(i8*, ...)

declare i8* @CreateString(i8*)

declare i8* @CreateEmptyString()

declare i8* @AddString(i8*, i8*)

declare i64 @CompareString(i8*, i8*)

declare i8* @CloneString(i8*)

declare i64 @GetStringSize(i8*)

declare i8* @CreateSlice(i64)

declare i8* @SliceAppend(i8*, ...)

declare i8* @SliceSlice(i8*, i64, i64)

declare i64 @GetSliceSize(i8*)

declare double @SetSliceIndexDouble(i8*, i64, double)

declare i8* @SetSliceIndexFuture(i8*, i64, i8*)

declare i8* @SetSliceIndexString(i8*, i64, i8*)

declare i64 @SetSliceIndexInt(i8*, i64, i64)

declare double @GetSliceIndexDouble(i8*, i64)

declare i8* @GetSliceIndexFuture(i8*, i64)

declare i8* @GetSliceIndexString(i8*, i64)

declare i64 @GetSliceIndexInt(i8*, i64)

declare i8* @ReadFile(i8*)

define void @digo_main() {
entry:
  %createstr = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr, i1 true)
  %createstr1 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.1, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr1, i1 false)
  %createstr2 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.2, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr2, i1 true)
  %createstr3 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.3, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr3, i1 false)
  %createstr4 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.4, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr4, i1 false)
  %createstr5 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.5, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr5, i1 false)
  %createstr6 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.6, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr6, i1 true)
  %createstr7 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.7, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr7, i1 true)
  %createstr8 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.8, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr8, i1 true)
  %createstr9 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.9, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr9, i1 false)
  %createstr10 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.10, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr10, i1 true)
  %createstr11 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.11, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr11, i1 false)
  %createstr12 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.12, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr12, i64 -10)
  %createstr13 = call i8* @CreateString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @createstr_ptr.13, i32 0, i32 0))
  call void (i8*, ...) @println(i8* %createstr13, i64 42)
  ret void
}
