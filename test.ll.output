
define i8* @digo_linker_async_call_id_0(i8* %arg0, i64 %arg1) {
entry:
  %wrapper = call i8* @SW_CreateWrapper()

  
  call void @SW_AddString(i8* %wrapper, i8* %arg0)
  call void @SW_AddInt64(i8* %wrapper, i64 %arg1)

  %result = alloca i8*, align 8
  %len = alloca i32, align 4

  call void @SW_GetAndDestroy(i8* %wrapper, i8** %result, i32* %len)

  %result_in = load i8*, i8** %result, align 8
  %len_in = load i32, i32* %len, align 4

  %future_obj = call i8* @CreateAsyncJob(i32 0, i8* %result_in, i32 %len_in)

  ret i8* %future_obj
}

define i32 @digo_linker_await_id_0(i8* %arg_future_obj) {
  %result = alloca i8*, align 8
  %len = alloca i32, align 4
  call void @AwaitJob(i8* %arg_future_obj, i8** %result, i32* %len)

  %result_in = load i8*, i8** %result, align 8
  %len_in = load i32, i32* %len, align 4

  %extractor = call i8* @SW_CreateExtractor(i8* %result_in, i32 %len_in)

  
  %ret0 = call i64 @SW_ExtractInt64(i8* %extractor)


  call void @SW_DestroyExtractor(i8* %extractor)

  ret i32 %ret0
}


define i32 @linker_call_function(i32 %func_id, i8* %arg, i32 %arg_len, i8** %result, i32* %result_len) {
  call void @Debug_Real_LinkerCallFunction(i32 %func_id, i32 %arg_len)

  %wrapper = call i8* @SW_CreateWrapper()
  %extractor = call i8* @SW_CreateExtractor(i8* %arg, i32 %arg_len)

  switch i32 %func_id, label %if.nomatch [

    i32 0, label %if.func0

  ]


if.func0:
  
  %arg0 = call i8* @SW_ExtractString(i8* %extractor)

  %arg1 = call i64 @SW_ExtractInt64(i8* %extractor)


  %arg0 = call i32 @async_func_test_string_to_int(i8* %arg0, i64 %arg1)

  
  call void @SW_AddInt64(i8* %wrapper, i64 %arg0)

  call void @SW_GetAndDestroy(i8* %wrapper, i8** %result, i32* %result_len)

  br label %if.end


if.nomatch:
  call void @NoMatchExceptionHandler(i32 %func_id)
  ret i32 0

if.end:

  call void @SW_DestroyExtractor(i8* %extractor)

  ret i32 0
}



declare dso_local void @AwaitJob(i8*, i8**, i32*)
declare dso_local void @JobDecRef(i8*)
declare dso_local i8* @CreateAsyncJob(i32, i8*, i32)

declare dso_local i8* @SW_CreateWrapper()
declare dso_local void @SW_AddString(i8*, i8*)
declare dso_local void @SW_AddInt32(i8*, i32)
declare dso_local void @SW_AddInt64(i8*, i64)
declare dso_local void @SW_GetAndDestroy(i8*, i8**, i32*)

declare dso_local i8* @SW_CreateExtractor(i8*, i32)
declare dso_local i32 @SW_ExtractInt32(i8*)
declare dso_local i64 @SW_ExtractInt64(i8*)
declare dso_local i8* @SW_ExtractString(i8*)
declare dso_local void @SW_DestroyExtractor(i8*)

declare dso_local void @NoMatchExceptionHandler(i32 %func_id)
declare dso_local void @ASYNC_AddFunction(i32, i8* nocapture readonly)

declare dso_local void @Debug_Real_LinkerCallFunction(i32, i32)

@.str.digo.linker.async.func.name0 = private unnamed_addr constant [30 x i8] c"async_func_test_string_to_int\00", align 1




define void @init_async_function_table() {
  call void @ASYNC_AddFunction(i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.digo.linker.async.func.name0, i64 0, i64 0))

  ret void
}

define void @main() {
entry:
  call void @init_async_function_table()

  ret void
}
